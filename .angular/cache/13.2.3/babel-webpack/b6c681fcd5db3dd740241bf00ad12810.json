{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Study\\\\MyWebApps\\\\hisaab\\\\hisaab-front\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./taxrate.service\";\nexport class NewOrderService {\n  constructor(taxRateService) {\n    this.taxRateService = taxRateService;\n    this.alltaxrates = [];\n    this.alltaxamounts = {};\n  }\n\n  createOrder(customer) {\n    if (customer) {\n      this.curOrder = {\n        customername: customer.name,\n        customer: customer,\n        status: 'Pending',\n        details: [],\n        date: new Date()\n      };\n    } else {\n      this.curOrder = {\n        details: [],\n        status: 'Pending',\n        date: new Date()\n      };\n    }\n  }\n\n  addCustomer(customer) {\n    if (!this.curOrder) {\n      this.createOrder(customer);\n    } else {\n      this.curOrder.customername = customer.name;\n      this.curOrder.customer = customer;\n    }\n  }\n\n  addOrderItem(product, discountRate, quantity) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      let isNew = true;\n      let foundIndex = -1;\n      let prvQuantity = 0;\n      let prvDiscountRate = 0; // Create new Order Item if currently not added to array\n\n      if (!_this.curOrder) {\n        _this.createOrder();\n      } else {\n        _this.curOrder.details.forEach((detail, index) => {\n          if (detail.product.name === product.name) {\n            isNew = false;\n            foundIndex = index;\n            prvQuantity = detail.quantity;\n            prvDiscountRate = detail.discountrate;\n          }\n        });\n      }\n\n      discountRate = discountRate ? discountRate : prvDiscountRate;\n      quantity = quantity ? quantity : prvQuantity + 1;\n      let total = product.price + product.mrp * product.margin / 100;\n      const discount = discountRate ? total * (discountRate / 100) : 0;\n      total = total - discount;\n\n      const taxrates = _this.taxRateService.getTaxRate(product.taxrate);\n\n      const taxrate = (_a = taxrates.rate) !== null && _a !== void 0 ? _a : 0;\n      const tax = taxrate / 100 * total;\n\n      if (isNew) {\n        const newItem = {\n          itemno: _this.curOrder.details ? _this.curOrder.details.length + 1 : 1,\n          product: product,\n          price: product.price,\n          quantity: quantity ? quantity : 1,\n          discountrate: discountRate,\n          discount: discount,\n          taxrate: product.taxrate,\n          tax: Math.round((tax + 0.00001) * 100) / 100,\n          total: Math.round((total + 0.00001) * 100) / 100\n        };\n\n        _this.curOrder.details.push(newItem);\n      } else {\n        // If Product already Exist, change the quantity\n        // QUANTITY\n        _this.curOrder.details[foundIndex].quantity = quantity; // DISCOUNT\n\n        _this.curOrder.details[foundIndex].discountrate = discountRate;\n        _this.curOrder.details[foundIndex].discount = discount * _this.curOrder.details[foundIndex].quantity; // TAX\n\n        _this.curOrder.details[foundIndex].tax = tax * _this.curOrder.details[foundIndex].quantity; // TOTAL AMOUNT\n\n        _this.curOrder.details[foundIndex].total = total * _this.curOrder.details[foundIndex].quantity;\n      }\n\n      _this.calculateSummary();\n    })();\n  }\n\n  deleteOrderItem(index) {\n    this.curOrder.details.splice(index, 1);\n    this.calculateSummary();\n  }\n\n  addDiscount(discountrate) {\n    if (!this.curOrder) {\n      this.createOrder();\n    }\n\n    this.curOrder.discountrate = discountrate;\n    this.calculateSummary();\n  }\n\n  calculateSummary() {\n    let total = 0;\n    let totaltax = 0;\n    let discount = 0;\n    this.alltaxrates = [];\n    this.alltaxamounts = {};\n\n    if (this.curOrder.details && this.curOrder.details.length > 0) {\n      this.curOrder.details.forEach((item, index) => {\n        this.curOrder.details[index].itemno = index + 1;\n        total += item.total;\n        totaltax += item.tax;\n\n        if (item.product.taxrate !== 'Exempted') {\n          if (this.alltaxrates.indexOf(item.product.taxrate) < 0) {\n            this.alltaxrates.push(item.product.taxrate);\n            this.alltaxamounts[item.product.taxrate] = 0;\n          }\n\n          this.alltaxamounts[item.product.taxrate] += item.tax;\n        }\n      });\n    }\n\n    if (this.curOrder.discountrate && this.curOrder.discountrate > 0) {\n      discount = total * (this.curOrder.discountrate / 100);\n      totaltax = totaltax - totaltax * (this.curOrder.discountrate / 100);\n    }\n\n    this.curOrder.total = total;\n    this.curOrder.discount = discount;\n    this.curOrder.totaltax = totaltax;\n    this.curOrder.finalamount = Math.round(total - discount);\n  }\n\n  setOrder(order) {\n    if (!order) {\n      return;\n    }\n\n    this.curOrder = order;\n    this.calculateSummary();\n  }\n\n  changeOrderStatus(status) {\n    this.curOrder.status = status;\n  }\n\n  changeOrderDate(orderDate) {\n    this.curOrder.date = orderDate;\n  }\n\n}\n\nNewOrderService.ɵfac = function NewOrderService_Factory(t) {\n  return new (t || NewOrderService)(i0.ɵɵinject(i1.TaxRateService));\n};\n\nNewOrderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: NewOrderService,\n  factory: NewOrderService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["D:/Study/MyWebApps/hisaab/hisaab-front/src/app/services/neworder.service.ts"],"names":["i0","i1","NewOrderService","constructor","taxRateService","alltaxrates","alltaxamounts","createOrder","customer","curOrder","customername","name","status","details","date","Date","addCustomer","addOrderItem","product","discountRate","quantity","_a","isNew","foundIndex","prvQuantity","prvDiscountRate","forEach","detail","index","discountrate","total","price","mrp","margin","discount","taxrates","getTaxRate","taxrate","rate","tax","newItem","itemno","length","Math","round","push","calculateSummary","deleteOrderItem","splice","addDiscount","totaltax","item","indexOf","finalamount","setOrder","order","changeOrderStatus","changeOrderDate","orderDate","ɵfac","NewOrderService_Factory","t","ɵɵinject","TaxRateService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"./taxrate.service\";\r\nexport class NewOrderService {\r\n    constructor(taxRateService) {\r\n        this.taxRateService = taxRateService;\r\n        this.alltaxrates = [];\r\n        this.alltaxamounts = {};\r\n    }\r\n    createOrder(customer) {\r\n        if (customer) {\r\n            this.curOrder = {\r\n                customername: customer.name,\r\n                customer: customer,\r\n                status: 'Pending',\r\n                details: [],\r\n                date: new Date\r\n            };\r\n        }\r\n        else {\r\n            this.curOrder = {\r\n                details: [],\r\n                status: 'Pending',\r\n                date: new Date\r\n            };\r\n        }\r\n    }\r\n    addCustomer(customer) {\r\n        if (!this.curOrder) {\r\n            this.createOrder(customer);\r\n        }\r\n        else {\r\n            this.curOrder.customername = customer.name;\r\n            this.curOrder.customer = customer;\r\n        }\r\n    }\r\n    async addOrderItem(product, discountRate, quantity) {\r\n        var _a;\r\n        let isNew = true;\r\n        let foundIndex = -1;\r\n        let prvQuantity = 0;\r\n        let prvDiscountRate = 0;\r\n        // Create new Order Item if currently not added to array\r\n        if (!this.curOrder) {\r\n            this.createOrder();\r\n        }\r\n        else {\r\n            this.curOrder.details.forEach((detail, index) => {\r\n                if (detail.product.name === product.name) {\r\n                    isNew = false;\r\n                    foundIndex = index;\r\n                    prvQuantity = detail.quantity;\r\n                    prvDiscountRate = detail.discountrate;\r\n                }\r\n            });\r\n        }\r\n        discountRate = discountRate ? discountRate : prvDiscountRate;\r\n        quantity = quantity ? quantity : prvQuantity + 1;\r\n        let total = product.price + (product.mrp * product.margin) / 100;\r\n        const discount = discountRate ? total * (discountRate / 100) : 0;\r\n        total = total - discount;\r\n        const taxrates = this.taxRateService.getTaxRate(product.taxrate);\r\n        const taxrate = (_a = taxrates.rate) !== null && _a !== void 0 ? _a : 0;\r\n        const tax = (taxrate / 100) * total;\r\n        if (isNew) {\r\n            const newItem = {\r\n                itemno: this.curOrder.details ? this.curOrder.details.length + 1 : 1,\r\n                product: product,\r\n                price: product.price,\r\n                quantity: quantity ? quantity : 1,\r\n                discountrate: discountRate,\r\n                discount: discount,\r\n                taxrate: product.taxrate,\r\n                tax: Math.round((tax + 0.00001) * 100) / 100,\r\n                total: Math.round((total + 0.00001) * 100) / 100\r\n            };\r\n            this.curOrder.details.push(newItem);\r\n        }\r\n        else {\r\n            // If Product already Exist, change the quantity\r\n            // QUANTITY\r\n            this.curOrder.details[foundIndex].quantity = quantity;\r\n            // DISCOUNT\r\n            this.curOrder.details[foundIndex].discountrate = discountRate;\r\n            this.curOrder.details[foundIndex].discount =\r\n                discount * this.curOrder.details[foundIndex].quantity;\r\n            // TAX\r\n            this.curOrder.details[foundIndex].tax = tax * this.curOrder.details[foundIndex].quantity;\r\n            // TOTAL AMOUNT\r\n            this.curOrder.details[foundIndex].total = total * this.curOrder.details[foundIndex].quantity;\r\n        }\r\n        this.calculateSummary();\r\n    }\r\n    deleteOrderItem(index) {\r\n        this.curOrder.details.splice(index, 1);\r\n        this.calculateSummary();\r\n    }\r\n    addDiscount(discountrate) {\r\n        if (!this.curOrder) {\r\n            this.createOrder();\r\n        }\r\n        this.curOrder.discountrate = discountrate;\r\n        this.calculateSummary();\r\n    }\r\n    calculateSummary() {\r\n        let total = 0;\r\n        let totaltax = 0;\r\n        let discount = 0;\r\n        this.alltaxrates = [];\r\n        this.alltaxamounts = {};\r\n        if (this.curOrder.details && this.curOrder.details.length > 0) {\r\n            this.curOrder.details.forEach((item, index) => {\r\n                this.curOrder.details[index].itemno = index + 1;\r\n                total += item.total;\r\n                totaltax += item.tax;\r\n                if (item.product.taxrate !== 'Exempted') {\r\n                    if (this.alltaxrates.indexOf(item.product.taxrate) < 0) {\r\n                        this.alltaxrates.push(item.product.taxrate);\r\n                        this.alltaxamounts[item.product.taxrate] = 0;\r\n                    }\r\n                    this.alltaxamounts[item.product.taxrate] += item.tax;\r\n                }\r\n            });\r\n        }\r\n        if (this.curOrder.discountrate && this.curOrder.discountrate > 0) {\r\n            discount = total * (this.curOrder.discountrate / 100);\r\n            totaltax = totaltax - totaltax * (this.curOrder.discountrate / 100);\r\n        }\r\n        this.curOrder.total = total;\r\n        this.curOrder.discount = discount;\r\n        this.curOrder.totaltax = totaltax;\r\n        this.curOrder.finalamount = Math.round(total - discount);\r\n    }\r\n    setOrder(order) {\r\n        if (!order) {\r\n            return;\r\n        }\r\n        this.curOrder = order;\r\n        this.calculateSummary();\r\n    }\r\n    changeOrderStatus(status) {\r\n        this.curOrder.status = status;\r\n    }\r\n    changeOrderDate(orderDate) {\r\n        this.curOrder.date = orderDate;\r\n    }\r\n}\r\nNewOrderService.ɵfac = function NewOrderService_Factory(t) { return new (t || NewOrderService)(i0.ɵɵinject(i1.TaxRateService)); };\r\nNewOrderService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: NewOrderService, factory: NewOrderService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}