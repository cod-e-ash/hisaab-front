{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Study\\\\MyWebApps\\\\hisaab\\\\hisaab-front\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./taxrate.service\";\nexport let NewOrderService = /*#__PURE__*/(() => {\n  class NewOrderService {\n    constructor(taxRateService) {\n      this.taxRateService = taxRateService;\n      this.alltaxrates = [];\n      this.alltaxamounts = {};\n    }\n\n    createOrder(customer) {\n      if (customer) {\n        this.curOrder = {\n          customername: customer.name,\n          customer: customer,\n          status: 'Pending',\n          details: [],\n          date: new Date()\n        };\n      } else {\n        this.curOrder = {\n          details: [],\n          status: 'Pending',\n          date: new Date()\n        };\n      }\n    }\n\n    addCustomer(customer) {\n      if (!this.curOrder) {\n        this.createOrder(customer);\n      } else {\n        this.curOrder.customername = customer.name;\n        this.curOrder.customer = customer;\n      }\n    }\n\n    addOrderItem(product, discountRate, quantity) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        var _a;\n\n        let isNew = true;\n        let foundIndex = -1;\n        let prvQuantity = 0;\n        let prvDiscountRate = 0; // Create new Order Item if currently not added to array\n\n        if (!_this.curOrder) {\n          _this.createOrder();\n        } else {\n          _this.curOrder.details.forEach((detail, index) => {\n            if (detail.product.name === product.name) {\n              isNew = false;\n              foundIndex = index;\n              prvQuantity = detail.quantity;\n              prvDiscountRate = detail.discountrate;\n            }\n          });\n        }\n\n        discountRate = discountRate ? discountRate : prvDiscountRate;\n        quantity = quantity ? quantity : prvQuantity + 1;\n        let total = product.price + product.mrp * product.margin / 100;\n        const discount = discountRate ? total * (discountRate / 100) : 0;\n        total = total - discount;\n\n        const taxrates = _this.taxRateService.getTaxRate(product.taxrate);\n\n        const taxrate = (_a = taxrates.rate) !== null && _a !== void 0 ? _a : 0;\n        const tax = taxrate / 100 * total;\n\n        if (isNew) {\n          const newItem = {\n            itemno: _this.curOrder.details ? _this.curOrder.details.length + 1 : 1,\n            product: product,\n            price: product.price,\n            quantity: quantity ? quantity : 1,\n            discountrate: discountRate,\n            discount: discount,\n            taxrate: product.taxrate,\n            tax: Math.round((tax + 0.00001) * 100) / 100,\n            total: Math.round((total + 0.00001) * 100) / 100\n          };\n\n          _this.curOrder.details.push(newItem);\n        } else {\n          // If Product already Exist, change the quantity\n          // QUANTITY\n          _this.curOrder.details[foundIndex].quantity = quantity; // DISCOUNT\n\n          _this.curOrder.details[foundIndex].discountrate = discountRate;\n          _this.curOrder.details[foundIndex].discount = discount * _this.curOrder.details[foundIndex].quantity; // TAX\n\n          _this.curOrder.details[foundIndex].tax = tax * _this.curOrder.details[foundIndex].quantity; // TOTAL AMOUNT\n\n          _this.curOrder.details[foundIndex].total = total * _this.curOrder.details[foundIndex].quantity;\n        }\n\n        _this.calculateSummary();\n      })();\n    }\n\n    deleteOrderItem(index) {\n      this.curOrder.details.splice(index, 1);\n      this.calculateSummary();\n    }\n\n    addDiscount(discountrate) {\n      if (!this.curOrder) {\n        this.createOrder();\n      }\n\n      this.curOrder.discountrate = discountrate;\n      this.calculateSummary();\n    }\n\n    calculateSummary() {\n      let total = 0;\n      let totaltax = 0;\n      let discount = 0;\n      this.alltaxrates = [];\n      this.alltaxamounts = {};\n\n      if (this.curOrder.details && this.curOrder.details.length > 0) {\n        this.curOrder.details.forEach((item, index) => {\n          this.curOrder.details[index].itemno = index + 1;\n          total += item.total;\n          totaltax += item.tax;\n\n          if (item.product.taxrate !== 'Exempted') {\n            if (this.alltaxrates.indexOf(item.product.taxrate) < 0) {\n              this.alltaxrates.push(item.product.taxrate);\n              this.alltaxamounts[item.product.taxrate] = 0;\n            }\n\n            this.alltaxamounts[item.product.taxrate] += item.tax;\n          }\n        });\n      }\n\n      if (this.curOrder.discountrate && this.curOrder.discountrate > 0) {\n        discount = total * (this.curOrder.discountrate / 100);\n        totaltax = totaltax - totaltax * (this.curOrder.discountrate / 100);\n      }\n\n      this.curOrder.total = total;\n      this.curOrder.discount = discount;\n      this.curOrder.totaltax = totaltax;\n      this.curOrder.finalamount = Math.round(total - discount);\n    }\n\n    setOrder(order) {\n      if (!order) {\n        return;\n      }\n\n      this.curOrder = order;\n      this.calculateSummary();\n    }\n\n    changeOrderStatus(status) {\n      this.curOrder.status = status;\n    }\n\n    changeOrderDate(orderDate) {\n      this.curOrder.date = orderDate;\n    }\n\n  }\n\n  NewOrderService.ɵfac = function NewOrderService_Factory(t) {\n    return new (t || NewOrderService)(i0.ɵɵinject(i1.TaxRateService));\n  };\n\n  NewOrderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NewOrderService,\n    factory: NewOrderService.ɵfac,\n    providedIn: 'root'\n  });\n  return NewOrderService;\n})();","map":null,"metadata":{},"sourceType":"module"}