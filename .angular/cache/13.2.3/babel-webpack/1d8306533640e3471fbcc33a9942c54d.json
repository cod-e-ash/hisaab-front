{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let TaxRateService = /*#__PURE__*/(() => {\n  class TaxRateService {\n    constructor(http) {\n      this.http = http;\n      this.url = environment.apiUrl + '/taxrates';\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'x-auth-token': 'xxxyyyzzz'\n        })\n      };\n    }\n\n    getTaxes() {\n      if (!this.taxRates) {\n        this.taxRates = [];\n        this.http.get(this.url).subscribe(data => {\n          // tslint:disable-next-line: curly\n          this.taxRates = data.taxRates;\n        });\n      }\n    } // HTTP GET\n\n\n    getData(inParams) {\n      const params = new HttpParams().set('page', (inParams && inParams.page ? inParams.page : 1).toString()).set('name', inParams && inParams.name ? inParams.name : '');\n      return this.http.get(this.url, {\n        params: params\n      }).pipe(tap(data => {\n        this.taxRates = data.taxRates;\n      }));\n    }\n\n    createData(data) {\n      return this.http.post(this.url, data, this.httpOptions);\n    } // patchData(id: string, status: boolean) {\n    //   const data = { _id: id, status: status };\n    //   return this.http.patch(this.url + '/' + id, data, this.httpOptions);\n    // }\n\n\n    updateData(data) {\n      return this.http.put(this.url + '/' + data.name, data, this.httpOptions);\n    }\n\n    deleteData(id) {\n      return this.http.delete(this.url + '/' + id, this.httpOptions);\n    }\n\n    getTaxRate(taxName) {\n      if (this.taxRates) {\n        return this.taxRates.find(taxRate => {\n          return taxRate.name === taxName;\n        });\n      }\n    }\n\n    getSingle(name) {\n      if (this.taxRates) {\n        return this.taxRates.filter(taxRate => {\n          return taxRate.name === name;\n        })[0];\n      }\n    }\n\n  }\n\n  TaxRateService.ɵfac = function TaxRateService_Factory(t) {\n    return new (t || TaxRateService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  TaxRateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TaxRateService,\n    factory: TaxRateService.ɵfac,\n    providedIn: 'root'\n  });\n  return TaxRateService;\n})();","map":null,"metadata":{},"sourceType":"module"}