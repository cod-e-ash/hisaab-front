{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport var CountryCodes = /*#__PURE__*/(() => {\n  (function (CountryCodes) {\n    CountryCodes[\"IND\"] = \"IND\";\n    CountryCodes[\"USA\"] = \"USA\";\n    CountryCodes[\"GBR\"] = \"GBR\";\n  })(CountryCodes || (CountryCodes = {}));\n\n  return CountryCodes;\n})();\nexport let UtilityService = /*#__PURE__*/(() => {\n  class UtilityService {\n    constructor() {\n      this.first = [\"\", \"One \", \"Two \", \"Three \", \"Four \", \"Five \", \"Six \", \"Seven \", \"Eight \", \"Nine \", \"Ten \", \"Eleven \", \"Twelve \", \"Thirteen \", \"Fourteen \", \"Fifteen \", \"Sixteen \", \"Seventeen \", \"Eighteen \", \"Nineteen \"];\n      this.tens = [\"\", \"\", \"Twenty \", \"Thirty \", \"Forty \", \"Fifty \", \"Sixty \", \"Seventy \", \"Eighty \", \"Ninety \"];\n      this.numSys = {\n        usNumSys: [\"\", \"Hundred \", \"Thousand \", \"Million \", \"Billion \", \"Trillion \"],\n        inNumSys: [\"\", \"Hundred \", \"Thousand \", \"Lakh \", \"Crore \"]\n      };\n      this.curCodes = {\n        IND: [\"Rupee\", \"Paisa\", \"Paise\", \"₹\", \"inNumSys\"],\n        USA: [\"Dollar\", \"Cent\", \"Cents\", \"$\", \"usNumSys\"],\n        GBR: [\"Pound\", \"Pence\", \"Pence\", \"£\", \"usNumSys\"]\n      };\n\n      this.toWords = (amount, countryCode = \"IND\") => {\n        // console.log(num);\n        const numSys = this.numSys[this.getNumSys(countryCode)];\n        const nStr = amount.toString().split(\".\"); // Remove any other characters than numbers\n\n        const wholeStr = Number(nStr[0].replace(/[^a-z\\d\\s]+/gi, \"\"));\n        const decimalStr = nStr.length > 1 ? Number(nStr[1]) : 0;\n        const wholeStrPart = this.getNumSys(countryCode) === \"inNumSys\" ? this.convert(wholeStr, numSys).trim() : this.convertInUS(wholeStr, numSys).trim();\n        const decimalPart = this.convert(decimalStr, numSys).trim();\n        let valueInStr = wholeStrPart.length > 0 ? `${wholeStrPart} ${this.getCurrencyWhole(countryCode, wholeStr)}` : `Zero ${this.getCurrencyWhole(countryCode, wholeStr)}`;\n        valueInStr = decimalPart.length > 0 ? `${valueInStr} And ${decimalPart} ${this.getCurrencyChange(countryCode, decimalStr)}` : valueInStr; // console.log(valueInStr);\n\n        return valueInStr;\n      };\n\n      this.getCurrencyWhole = (countryCode = \"IND\", amount = 0) => {\n        const cur = this.curCodes[countryCode] ? this.curCodes[countryCode][0] : this.curCodes[\"IND\"][0];\n        if (amount > 1) return cur + \"s\";else return cur;\n      };\n\n      this.getCurrencyChange = (countryCode, amount = 0) => {\n        if (amount > 1) return this.curCodes[countryCode] ? this.curCodes[countryCode][2] : this.curCodes[\"IND\"][2];else return this.curCodes[countryCode] ? this.curCodes[countryCode][1] : this.curCodes[\"IND\"][1];\n      };\n\n      this.getCurrencySymbol = countryCode => {\n        return this.curCodes[countryCode] ? this.curCodes[countryCode][2] : this.curCodes[\"IND\"][2];\n      };\n\n      this.getNumSys = countryCode => {\n        return this.curCodes[countryCode] ? this.curCodes[countryCode][4] : this.curCodes[\"IND\"][4];\n      };\n\n      this.convert = (num, numSys) => {\n        const numStr = num.toString().split(\"\");\n        const finalStr = [];\n\n        while (numStr.length > 0) {\n          for (let i = 0; i < numSys.length - 1; ++i) {\n            if (i === 1) finalStr.unshift(this.getUnits(numStr.splice(-1), numSys, i));else finalStr.unshift(this.getUnits(numStr.splice(-2), numSys, i));\n          }\n\n          if (numStr.length > 0) finalStr.unshift(...numSys.slice(-1));\n        }\n\n        return finalStr.join(\"\");\n      };\n\n      this.convertInUS = (num, numSys) => {\n        const numStr = num.toString().split(\"\");\n        const finalStr = [];\n\n        while (numStr.length > 0) {\n          // console.log(numSys.length);\n          for (let i = 0, l = numSys.length * 2 - 1; i < l; ++i) {\n            // console.log(numStr, i, (i/2)+1);\n            if (i === 0) finalStr.unshift(this.getUnits(numStr.splice(-2), numSys, 0));else if (i % 2 === 1) finalStr.unshift(this.getUnits(numStr.splice(-1), numSys, 1));else {\n              finalStr.unshift(this.getUnits(numStr.splice(-2), numSys, i / 2 + 1));\n            }\n          }\n\n          if (numStr.length > 0) finalStr.unshift(...numSys.slice(-1));else break;\n        }\n\n        return finalStr.join(\"\");\n      };\n\n      this.getUnits = (lastTwo, numSys, place) => {\n        var _a;\n\n        if (!lastTwo || lastTwo.length === 0) return \"\";\n        let numInStr = \"\";\n        if (this.first[Number(lastTwo.join(\"\"))]) numInStr = this.first[Number(lastTwo.join(\"\"))];else numInStr = `${this.tens[Number(lastTwo.shift())]}${this.getUnits(lastTwo.slice(-1), numSys)}`;\n        if (numInStr && place) numInStr = `${numInStr}${(_a = numSys[place]) !== null && _a !== void 0 ? _a : \"\"}`;\n        return numInStr;\n      };\n    }\n\n  }\n\n  UtilityService.ɵfac = function UtilityService_Factory(t) {\n    return new (t || UtilityService)();\n  };\n\n  UtilityService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UtilityService,\n    factory: UtilityService.ɵfac,\n    providedIn: 'root'\n  });\n  return UtilityService;\n})();","map":null,"metadata":{},"sourceType":"module"}