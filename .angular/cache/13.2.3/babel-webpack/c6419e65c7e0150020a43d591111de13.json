{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProductService = /*#__PURE__*/(() => {\n  class ProductService {\n    // Constructor\n    constructor(http) {\n      this.http = http;\n      this.url = environment.apiUrl + '/products'; // HTTP Options\n\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'x-auth-token': 'xxxyyyzzz'\n        })\n      };\n    } // HTTP GET\n\n\n    getData(inParams) {\n      const params = new HttpParams().set('code', inParams && inParams.code ? inParams.code : '').set('page', (inParams && inParams.page ? inParams.page : 1).toString()).set('name', inParams && inParams.name ? inParams.name : '').set('company', inParams && inParams.company ? inParams.company : '').set('stockOpt', inParams && inParams.stockOpt ? inParams.stockOpt : '');\n      return this.http.get(this.url, {\n        params: params\n      }).pipe(tap(data => {\n        this.products = data.products;\n      }));\n    }\n\n    createData(data) {\n      return this.http.post(this.url, data, this.httpOptions);\n    }\n\n    patchData(id, status) {\n      const data = {\n        _id: id,\n        status: status\n      };\n      return this.http.patch(this.url + '/' + id, data, this.httpOptions);\n    }\n\n    updateData(data) {\n      return this.http.put(this.url + '/' + data._id, data, this.httpOptions);\n    }\n\n    deleteData(id) {\n      return this.http.delete(this.url + '/' + id, this.httpOptions);\n    }\n\n    getSingle(id) {\n      if (this.products) {\n        return this.products.filter(product => {\n          return product._id === id;\n        })[0];\n      }\n    }\n\n  }\n\n  ProductService.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductService;\n})();","map":null,"metadata":{},"sourceType":"module"}